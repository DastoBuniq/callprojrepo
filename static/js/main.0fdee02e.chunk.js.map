{"version":3,"sources":["Search.js","Contact.js","AddContact.js","App.js","serviceWorker.js","index.js","acstyle.module.css"],"names":["Search","props","className","type","placeholder","style","float","onClick","func","add","Contact","state","clicked","infoContact","this","value","phone","mail","name","setState","React","Component","AddContact","useState","val","touched","classN","inName","setInName","inSurname","setInSurname","inPhone","setInPhone","inMail","setInMail","styles","onChange","e","target","doneBtn","id","App","adding","setAdding","onPlus","map","index","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.0fdee02e.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\n\nfunction Search(props) {\n    return (\n        <div className=\"sRow\">\n            <i className=\"fas fa-search\"></i>\n          <input type=\"search\" placeholder=\"Ricerca\" className=\"searchBar\"></input>\n          <button className=\"infoBtn\"\n            style={{float: 'right'}}\n            onClick={props.func}>\n              {props.add ? <i className=\"fas fa-times\"></i>  : <i className=\"fas fa-plus\"></i>}\n              </button>\n        </div>\n      );\n}\n\nexport default Search;","import React from 'react';\nimport './App.css';\n\nclass Contact extends React.Component {\n    constructor (props){\n        super(props);\n        this.state = {\n            clicked : false,\n        }\n    }\n\n    render(){\n        let infoContact \n        if(this.state.clicked){\n            infoContact = (\n                <div>\n                    <span className=\"infoSpan\">Telefono: {this.props.value.phone}</span>\n                    <span className=\"infoSpan\">Mail: {this.props.value.mail}</span>\n                </div>\n            )\n        }else{\n            infoContact = (<></>)\n        }\n        return (\n            <div className=\"row\">\n                <div>\n                <span>{this.props.value.name}</span>\n                <button className=\"infoBtn\"\n                onClick={()=>this.setState({clicked: !this.state.clicked})}><i className=\"fas fa-info-circle\"></i></button>\n                <button className=\"infoBtn\"\n                style={{float: 'right'}}><i className=\"fas fa-phone\"></i></button>\n                </div>\n                {infoContact}\n            </div>\n          );\n    \n    }\n\n}\n\n\nexport default Contact;","import React from 'react';\nimport styles from './acstyle.module.css'\nimport { useState } from 'react';\n\n\nfunction AddContact(props){\n    const [inName, setInName] = useState({val:'', touched: false, classN: 'input'});\n    const [inSurname, setInSurname] = useState({val:'', touched: false, classN: 'input'});\n    const [inPhone, setInPhone] = useState({val:'', touched: false, classN: 'input'});\n    const [inMail, setInMail] = useState({val:'', touched: false, classN: 'input'});\n    // const [inptClass, setInptClass] = useState({val:'', touched: false, classN: ''})\n    // const name = <input type=\"text\" placeholder=\"Nome\" className={inptClass} value={inName} onChange={e => setInName(e.target.value)}></input>\n    // const surname = <input type=\"text\" placeholder=\"Cognome\" value={inSurname} onChange={e => setInSurname(e.target.value)}></input>\n    // const phone = <input type=\"text\" placeholder=\"Telefono\" value={inPhone} onChange={e => setInPhone(e.target.value)}></input>\n    // const mail = <input type=\"text\" placeholder=\"Mail\" value={inMail} onChange={e => setInMail(e.target.value)}></input>\n\n    function onDone(){\n        !inName.val && inName.touched ? setInName({...inName, classN: 'inptErr'}) : setInName({...inName, classN: 'input'})\n        !inSurname.val && inSurname.touched ? setInSurname({...inSurname, classN: 'inptErr'}) : setInSurname({...inSurname, classN: 'input'})\n        !inPhone.val && inPhone.touched ? setInPhone({...inPhone, classN: 'inptErr'}) : setInPhone({...inPhone, classN: 'input'})\n        !inMail.val && inMail.touched ? setInMail({...inMail, classN: 'inptErr'}) : setInMail({...inMail, classN: 'input'})\n        correctClose()\n    }\n    function correctClose(){\n        if(inName.val && inSurname.val && inPhone.val && inMail.val){\n            props.func()\n        }\n    }\n\n    return(\n        <div>\n            <span>\n            <input type=\"text\" placeholder=\"Nome\" className={styles[inName.classN]} \n            value={inName.val} onChange={e => setInName({...inName, val: e.target.value , touched: true})}></input>\n            </span>\n            <span>\n            <input type=\"text\" placeholder=\"Cognome\" className={styles[inSurname.classN]} \n            value={inSurname.val} onChange={e => setInSurname({...inSurname, val: e.target.value , touched: true})}></input>\n            </span>\n            <span>\n            <input type=\"text\" placeholder=\"Telefono\" className={styles[inPhone.classN]} \n            value={inPhone.val} onChange={e => setInPhone({...inPhone, val: e.target.value , touched: true})}></input>\n            </span>\n            <span>\n            <input type=\"text\" placeholder=\"Mail\" className={styles[inMail.classN]} \n            value={inMail.val} onChange={e => setInMail({...inMail, val: e.target.value , touched: true})}></input>\n            </span>\n            <button className={styles.doneBtn} id=\"name\"\n            onClick={onDone}>Fatto</button>\n        </div>\n    )\n}\n\nexport default AddContact","import React from 'react';\nimport './App.css';\nimport Search from './Search'\nimport Contact from './Contact';\nimport AddContact from './AddContact';\nimport { useState } from 'react';\n\nfunction App() {\n\n  const elements = [\n    {\n      name: 'Damiano Stopo',\n      phone: 3427529311,\n      mail: 'damy32dc@gmail.com'\n    },\n    {\n      name: 'Giorgio Stopo',\n      phone: 3427529311,\n      mail: 'damy32dc@gmail.com'\n    },\n    {\n      name: 'Federica Stopo',\n      phone: 3427529311,\n      mail: 'damy32dc@gmail.com'\n    }];\n\n    const [adding, setAdding] = useState(false)\n    function onPlus(){\n      setAdding(!adding)\n    }\n\n  return (\n    <div className=\"mainPane\">\n      <Search func={onPlus} add={adding}/>\n      {adding ? <AddContact func={onPlus}/> : <></>}\n      {elements.map((value, index)=>{\n        return <Contact key={index} value={value}/>\n      })}\n    </div>\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"doneBtn\":\"acstyle_doneBtn__1XUYK\",\"input\":\"acstyle_input__2spqw\",\"inptErr\":\"acstyle_inptErr__2yHqw\",\"span\":\"acstyle_span__3lBLr\"};"],"sourceRoot":""}